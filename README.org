#+TITLE: Progetto scuola

* Table of Contents :TOC_3:noexport:
- [[#compiti][Compiti]]
  - [[#leonardo-bizzoni][Leonardo Bizzoni]]
  - [[#cristian-bonomi][Cristian Bonomi]]
  - [[#vincenzo-palermo][Vincenzo Palermo]]
  - [[#samuel-codispoti][Samuel Codispoti]]
- [[#tecnologie-utilizzate][Tecnologie utilizzate]]
  - [[#parte-arduino][Parte arduino]]
  - [[#parte-server][Parte server]]
- [[#codice-arduino][Codice arduino]]
  - [[#librerie-e-inizializzazione-variabili][Librerie e inizializzazione variabili]]
  - [[#funzione-di-setup][Funzione di setup]]
  - [[#funzione-di-loop][Funzione di loop]]
- [[#idee][Idee]]
  - [[#1---acquisizione-dati][1 - Acquisizione dati]]
  - [[#2---comunicazione-con-la-pagina-web][2 - Comunicazione con la pagina web]]
  - [[#3][3]]

* Compiti
** Leonardo Bizzoni
- Programmazione arduino
- Gestione interazioni arduino → server, client → server
- Documentazione del progetto

** Cristian Bonomi
- Gestione DB con phpMyAdmin
- UML

** Vincenzo Palermo
- Gestione DB con phpMyAdmin
- Programmazione front-end

** Samuel Codispoti
- Programmazione front-end
- Gestione interazioni client → server

* Tecnologie utilizzate
** Parte arduino
Hardware:
- Arduino board
- Passive infrared motion sensor
- Ethernet shield

Collegare supporto ethernet alla board arduino e il sensore.
Il sensore rileva i dati e li comunica alla board che a sua volta li invia al server attraverso una HTTP/POST request.

** Parte server
Tecnologie:
- JSON
- Apache
- phpMyAdmin
- PHP

Apache riceve la HTTP/POST request.
PHP elabora la request leggendo i dati, scrive una SQL query per inserirli nel DB.

Quando un client accede alla pagina web, JS invia una HTTP/GET request al server per leggere i dati nel DB.
PHP elabora la request, preleva i dati dal DB e li formatta in JSON per inviarli al client.
Il client riceve il JSON, preleva i dati e li mostra sulla pagina web.

* Codice arduino
** Librerie e inizializzazione variabili
La libreria /Ethernet.h/ permette ad Arduino con dispositivi di reti basati su W5100 / W5200 / *W5500* di connetersi alla rete.
#+begin_src arduino :tangle ./Arduino/main.ino
#include <Ethernet.h>
#+end_src

Crea una constante /pirSensor/ con il valore 2 che è il pin sulla board arduino a cui il PIR sensor è collegato.
#+begin_src arduino :tangle ./Arduino/main.ino
#define pirSensor 2
#+end_src

È necessario specificare l'indirizzo MAC, IP dell'arduino e l'indirizzo IP del server a cui vogliamo connetterci.
È possibile utilizzare un domain name al posto dell'IP del server ma, per semplicità, utlizzeremo l'IP numerico.
#+begin_src arduino :tangle ./Arduino/main.ino
byte mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x84, 0xB4 };
IPAddress ip(192, 168, 1, 177);

IPAddress server(192,168,1,146);

EthernetClient client;
String postData;
#+end_src

** Funzione di setup
/Aprire la comunicazione seriale è solo per il debugging./
Imposta la constante /pirSensor/ in modalità ingresso per la lettura dei dati.
Comincia la sessione ethernet e aspetta che si inizializzi l'ethernet shield.

#+begin_src arduino :tangle ./Arduino/main.ino
void setup() {
  pinMode(pirSensor, INPUT);

  Serial.begin(9600);
  while (!Serial) {
    ;
  }

  Serial.println("Initialize Ethernet with static IP:");
  Ethernet.begin(mac, ip); // apre la sessione ethernet

  delay(1000);
  Serial.print("connecting to ");
  Serial.print(server);
  Serial.println("...");
}
#+end_src

** Funzione di loop
La funziona /loop/ viene chiamata costantemente, ogni ciclo controlla che il valore letto dal PIR sensor sia /HIGH/ e prova a connetersi al server.
/client.connect(server, 80)/ restituisce /true/ se la connessione è avvenuta con successo e /false/ se qualcosa non è andato a buon fine.

Se il valore letto è /HIGH/ e riesce a connettersi al server allora invia una HTTP/POST con il valore /data=movimento/ che il server dovrà poi ricevere e immagazzinare nel database.

#+begin_src arduino :tangle ./Arduino/main.ino
void loop() {
  if (digitalRead(pirSensor) == HIGH && client.connect(server, 80)) {
    postData = "data=movimento";

    Serial.print("connected to ");
    Serial.println(client.remoteIP());

    client.println("POST /ProgettoScuola0/arduino_test.php HTTP/1.1");
    client.print("Host: ");
    client.println(server);
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(postData.length());
    client.println();
    client.println(postData);

    Serial.println("Connessione avvenuta");
    delay(2000);
  }

  if (client.connected())
    client.stop();
}
#+end_src

* Idee
** 1 - Acquisizione dati
Arduino legge valori da un sensore infrarossi.
Invia una get request (php).
Php prende i dati della get e li mette su un DB.

** 2 - Comunicazione con la pagina web
Un client invia una richiesta al server per i valori letti dall'arduino (che sono nel DB)
Ogni tot il client invia una request al server.

Php riceve la request recupera i dati e li formatta in JSON e lo manda al client.
Php risponde con il JSON

JS se ci sono più di 15 persone cambia il colore di un quadratino sulla pagina a rosso. (Normalmente è verde)
Per ogni persona che entra mostrare un'icona sulla pagina.

** 3
Il client riceve il JSON, lo interpreta e aggiorna il grafico.

/Ogni tot cambia colore il grafico per simbologgiare il valore letto/.
