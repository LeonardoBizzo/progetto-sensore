#+TITLE: Progetto scuola

* Table of Contents :TOC_3:noexport:
- [[#introduzione][Introduzione]]
- [[#descrizione-del-progetto][Descrizione del progetto]]
- [[#realizzazione-del-progetto][Realizzazione del progetto]]
  - [[#installazione-del-web-server][Installazione del web server]]
  - [[#creazione-del-database][Creazione del Database]]
    - [[#installazione-mariadb][Installazione mariadb]]
    - [[#creazione-del-database-1][Creazione del Database]]
  - [[#crezione-del-backend---php][Crezione del backend - PHP]]
    - [[#arduinohandler---come-registrare-il-dato-rilevato-dal-sensore-nel-database][ArduinoHandler - Come registrare il dato rilevato dal sensore nel database]]
    - [[#userhandler---come-prelevare-i-dati-dal-database][UserHandler - Come prelevare i dati dal database]]
  - [[#sketch-arduino-mainimo][Sketch arduino "main.imo"]]
    - [[#librerie-e-inizializzazione-variabili][Librerie e inizializzazione variabili]]
    - [[#funzione-di-setup][Funzione di setup]]
    - [[#funzione-di-loop][Funzione di loop]]
  - [[#realizzazione-interfaccia-web][Realizzazione interfaccia web]]

* Introduzione
Lo scopo del progetto è di realizzare un sistema di:
- Rilevare il movimento di una persona.
- Inviare il dato ad un server web.
- Rappresentare il dato con un avatar.
- Visualizzare sulla pagina web gli avatar.

* Descrizione del progetto
L'acquisizione del movimento viene rilevata dal sensore PIR (HC-SR501) collegato alla board Arduino UNO.

[[./media/pinoutSensore.jpg]]

Posizionando il sensore come in figura:
- Il pin in alto va collegato alla messa a terra.
- Il pin centrale va collegato ad una porta seriale, nel nostro caso seriale 2.
- L'ultimo pin va collegato ai 5V della board.
[[./media/connessione.jpg]]

Arduino UNO di base non è dotato di una porta Ethernet o di un'antenna wi-fi perciò è necessario dotare la board Arduino con uno shild Ethernet (W5500).
Lo shield viene posizionato direttamente sopra la board Arduino, come in figura.
Una volta collegato lo shild alla board bisogna programmare la board adeguatamente per sfruttare le capacità dello shild.
[[./media/arduinoShield.jpg]]

Una volta che il web server riceve il dato attraverso una richiesta HTTP POST, crea una connessione al database server e crea un nuovo record contenente il timestamp del rilevamento ed il valore(1).

Quando un utente visita la pagina vede un tot di avatar in base a quante persone/movimenti sono registrati nel database che sono stati registrati null'ultima ore.

* Realizzazione del progetto
** Installazione del web server
L'installazione del server web apache e di php viene eseguita tramite un docker container e la seguente container image:
#+begin_src dockerfile :tangle www/Dockerfile
FROM php:8.1.4-fpm-alpine3.14
WORKDIR /var/www/localhost/htdocs
RUN apk update && apk add php8-apache2 php8-mysqli
ENTRYPOINT ["/usr/sbin/httpd", "-d", "foreground"]
#+end_src

Eseguire i seguenti comandi per creare e avviare il container:
#+begin_src sh
cd www
docker build -t arduinoweb .
docker run -dp 80:80 -v "$pwd":/var/www/localhost/htdocs arduinoweb
#+end_src

** Creazione del Database
*** Installazione mariadb
L'installazione del database server mariadb viene eseguita tramite un docker container.
Eseguire i seguenti comandi per creare e avviare il container:
#+begin_src sh
cd DB
docker run -p 3306:3306 -v "$PWD":/var/lib/mysql -e MARIADB_ROOT_PASSWORD=root -d mariadb:latest --port 3306
#+end_src

*** Creazione del Database
Una volta attivato il daemon mariadb è possibile accedere da riga di comando fornendo il nome utente e la password.

Creare il database e specificare quale database utilizzeremo.
[[./media/db0.png]]

Creare la tabella che conterrà i valori acquisiti dall'arduino.
[[./media/db1.png]]

Impostare la *primary key* e metterla *auto_increment*.
[[./media/db3.png]] [[./media/db4.png]]

** Crezione del backend - PHP
Ogni volta che il sensore PIR montato sull'arduino rileva movimento lo invia alla pagina "index.php".
Index.php, oltre a contenere il codice HTML da mostrare all'utente, include 2 script:
- *arduinoHandler.php*: gestisce le richieste che riceve dall'arduino
- *userHandler.php*: gestisce le richieste che riceve dall'utente

*** ArduinoHandler - Come registrare il dato rilevato dal sensore nel database
/Questo viene incluso utilizzando "include" in index.php./

Se nell'array "$_POST" esiste il campo "arduinoData", la richiesta proviene dall'arduino e bisogna registarla nel database.

Per registrare il valore nel database bisogna creare un oggetto "mysqli" fornendo come parametri:
- *indirizzo IP + numero di porta*
- *username*
- *password*
- *nome del database*
Se questa fase fallisce allora viene chiamata la funzione "die" con un messaggio che mostra l'errore.

Una volta creato l'oggetto "mysqli" possiamo utilizzarne il metodo "query" per invia una query al database.

#+begin_src php :tangle www/arduinoHandler.php
<?php
if (isset($_POST["datiSensore"])) {
    $sql = new mysqli("localhost:3306", "root", "", "DatiSensore") or die("Connection error:" . $sql->error);
    $sql->query("INSERT INTO `Valori`(`num_persone`, `timestamp_lettura`) VALUES ('1','".date("Y-m-d H:i:s")."')");

    $sql->close();
}
?>
#+end_src

*** UserHandler - Come prelevare i dati dal database
#+begin_src php :tangle www/userHandler.php
<?php
if (is_null($_POST["data"])) {
    $sql = new mysqli("localhost:3306", "root", "", "DatiSensore") or die("Connection error:" . $sql->error);
    $result = $sql->query("SELECT * FROM `Valori`");

    while ($row = $result->fetch_assoc()) {
        print_r($row);
        echo "</br>";
    }

    $sql->close();
}
?>
#+end_src

** Sketch arduino "main.imo"
#TODO: aggiungere buffer di memoria per quando non riesce a connettersi al server

*** Librerie e inizializzazione variabili
La libreria /Ethernet.h/ permette ad Arduino con dispositivi di reti basati su W5100 / W5200 / *W5500* di connetersi alla rete.
#+begin_src cpp :tangle ./Arduino/main.ino
#include <Ethernet.h>
#+end_src

Crea una constante /pirSensor/ con il valore 2 che è il pin sulla board arduino a cui il PIR sensor è collegato.
#+begin_src cpp :tangle ./Arduino/main.ino
#define pirSensor 2
#+end_src

È necessario specificare l'indirizzo MAC, IP dell'arduino e l'indirizzo IP del server a cui vogliamo connetterci.
È possibile utilizzare un domain name al posto dell'IP del server ma, per semplicità, utlizzeremo l'IP numerico.
#+begin_src cpp :tangle ./Arduino/main.ino
byte mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x84, 0xB4 };
IPAddress ip(192, 168, 1, 177);

IPAddress server(192,168,1,146);

EthernetClient client;
String postData;
#+end_src

*** Funzione di setup
Imposta la constante /pirSensor/ in modalità ingresso per la lettura dei dati.
Comincia la sessione ethernet e aspetta che si inizializzi l'ethernet shield.

#+begin_src cpp :tangle ./Arduino/main.ino
void setup() {
  pinMode(pirSensor, INPUT);

  Ethernet.begin(mac, ip); // apre la sessione ethernet

  delay(1000);
}
#+end_src

*** Funzione di loop
La funziona /loop/ viene chiamata costantemente, ogni ciclo controlla che il valore letto dal PIR sensor sia /HIGH/ e prova a connetersi al server.
/client.connect(server, 80)/ restituisce /true/ se la connessione è avvenuta con successo e /false/ se qualcosa non è andato a buon fine.

Se il valore letto è /HIGH/ e riesce a connettersi al server allora invia una HTTP/POST con il valore /data=movimento/ che il server dovrà poi ricevere e immagazzinare nel database.

#+begin_src cpp :tangle ./Arduino/main.ino
void loop() {
  if (digitalRead(pirSensor) == HIGH && client.connect(server, 80)) {
    postData = "datiSensore=movimento";

    client.println("POST /ProgettoScuola0/index.php HTTP/1.1");
    client.print("Host: ");
    client.println(server);
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(postData.length());
    client.println();
    client.println(postData);

    delay(2000);
  }

  if (client.connected())
    client.stop();
}
#+end_src

** Realizzazione interfaccia web
#TODO: effettivamente scrivere il codice
